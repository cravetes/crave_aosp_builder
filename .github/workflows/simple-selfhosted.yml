#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Simple Selfhosted Crave Builder.
on:
  workflow_dispatch:
  
jobs:
  run-devspace-and-tmux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
        if [ "${DCDEVSPACE}" == "1" ]; then
        echo 'No need to set up crave, we are already running in devspace!'
        else
          mkdir ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample          
        fi
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave devspace -- "if tmux has-session -t ghactions; then 
          echo "Runner is already Running" 
        else 
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions 
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter 
          echo "Runner Started"
        fi "

  test:
    name: Test Local Manifests
    runs-on: ubuntu-latest
    steps:
      # Download and configure 'repo'.
    - name: Configure the 'repo' environment
      run: |
        # Check if repo is already installed
        if ! command -v repo >/dev/null 2>&1; then
          echo "Repo not found. Installing now..."
          # Create bin directory if it doesn't exist
          mkdir -p ~/bin
          # Download repo script
          curl https://storage.googleapis.com/git-repo-downloads/repo >> ~/bin/repo
          # Make repo script executable
          chmod a+x ~/bin/repo
          # Create symbolic link to /usr/bin/repo
          sudo ln -sf "/home/$(whoami)/bin/repo" "/usr/bin/repo"
          echo "Repo installation complete."
        else
          echo "Repo already installed."
        fi
      continue-on-error: true
      
      # Generate 'git' credential in base of the workflow's author.
    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

  build:
    timeout-minutes: 720      
    name: Build using foss.crave.io
    needs: test 
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
    - name: Cleanup
      run: rm -rf * # This cleans github actions workspace

      # Create a project folder
    - name: Create Project Folders
      run: |
        if [ "${DCDEVSPACE}" != "1" ]; then
          echo "Symlinking devspace folder"
          mkdir -p devspace
          sudo mkdir -p /crave-devspaces
          sudo ln -sf ${pwd}/devspace /crave-devspaces
          sudo chmod 777 /crave-devspaces
        else
          echo "We are already running in devspace... Skipping Symlinks"
        fi
        
        if [ -d "/crave-devspace/havoc" ]; then
        cd havoc
        else
        mkdir havoc
        fi
        crave set --ProjectID 73
        crave run --no-patch "rm -rf .repo/local_manifests/ sekerip && git clone https://github.com/newestzdn/sekerip && chmod +rwx sekerip/* && bash sekerip/apalah.sh"
 
        
      # Only reach this wheter the user killed the workflow.
    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd havoc
        crave stop --all

      # Upload '.zip's and '.img's directly from 'crave' ssh.
    - name: Upload build artifact(s)
      continue-on-error: true
      run: |
        cd havoc
        
      # Pull Errors and Display them
    - name: Display error.log
      if: ${{ failure() }}
      id: errorlog
      run: |
        cd havoc
        crave ssh -- sleep 1
        crave pull out/error.log
        echo "Displaying out/error.log"
        cat out/error.log

      # Remove 'crave' clone
    - name: Destroy Crave Clone
      if: ${{ always() }}
    
