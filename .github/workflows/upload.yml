#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Upload to Pixeldrain
on:
  workflow_dispatch:
    # Various inputs to simplify usage of workflow.
    inputs:
      BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        default: 'ArrowOS 13.1'
        type: choice
        options:
          - 'LineageOS 20.0'
          - 'LineageOS 21.0'
          - 'ArrowOS 13.1'
      FOLDER_NAME:
        description: "Folder Name:"
        required: true
        default: 'cherish'
      DEVICE_CODENAME:
        description: "Your device codename: (ex. topaz, tissot)"
        required: true
        default: 'citrus'
      
jobs:
  run-devspace-and-tmux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux
        
    - name: Configure crave
      run: |
        mkdir -p $PROJECTFOLDER/.repo/manifests
        if [ "${DCDEVSPACE}" == "1" ]; then
          echo 'No need to set up crave, we are already running in devspace!'
        else
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
          cp crave.conf $PROJECTFOLDER
        fi
        if [[ -z "${{ secrets.CUSTOM_YAML }}" ]]; then
          cp crave.yaml $PROJECTFOLDER/.repo/manifests
          echo "No Custom Configuration Found, Using Template!"
        else
          touch $PROJECTFOLDER/.repo/manifests/crave.yaml || true
          echo "${{ secrets.CUSTOM_YAML }}" > $PROJECTFOLDER/.repo/manifests/crave.yaml
          echo "Custom Configuration Found!"
        fi
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Test Local Manifests
      run: |
        # Check if repo is already installed
        if ! command -v repo >/dev/null 2>&1; then
          echo "Repo not found. Installing now..."
          # Create bin directory if it doesn't exist
          mkdir -p ~/bin
          # Download repo script
          curl https://storage.googleapis.com/git-repo-downloads/repo >> ~/bin/repo
          # Make repo script executable
          chmod a+x ~/bin/repo
          # Create symbolic link to /usr/bin/repo
          sudo ln -sf "/home/$(whoami)/bin/repo" "/usr/bin/repo"
          echo "Repo installation complete."
        else
          echo "Repo already installed."
        fi
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

        # This cleans github actions workspace
           unset PROJECTFOLDER
           unset DEVICE_CODENAME

      # Create a project folder
    - name: Create Project Folders
      run: |
          if [ "${DCDEVSPACE}" != "1" ]; then
          echo "Symlinking devspace folder"
          mkdir -p devspace
          sudo mkdir -p /crave-devspaces
          sudo ln -sf ${pwd}/devspace /crave-devspaces
          sudo chmod 777 /crave-devspaces
          else
          echo "We are already running in devspace... Skipping Symlinks"
          fi
          cd /crave-devspaces/
          export PROJECTFOLDER="/crave-devspaces/$FOLDERNAME"
          if [ ! -d "$FOLDERNAME" ]; then
          mkdir "$FOLDERNAME"
          fi
          echo "PROJECTFOLDER=$PROJECTFOLDER" >> "$GITHUB_ENV"
    
      env:
          FOLDERNAME: ${{ github.event.inputs.FOLDER_NAME }}
        
      # Check-out in order to access the repository's files.
    - name: Check-out to repository
      uses: actions/checkout@v4
      
      # Generate 'git' credential in base of the workflow's author.
    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
    
      # Only reach this wheter the user killed the workflow.
    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd $PROJECTFOLDER
        crave stop --all

      # Upload '.zip's and '.img's directly from 'crave' ssh.
    - name: Upload build artifact(s)
      run: |
        cd $PROJECTFOLDER
        crave pull out/target/product/*/Cherish-OS-v5.5-*.zip
        cd $DEVICE_CODENAME
        rm -rf *.sh 
        wget https://raw.githubusercontent.com/newestzdn/anthrskrpt/main/pixeldrain_upload.sh
        rm -rf .img
        wget https://raw.githubusercontent.com/zaidanprjkt/device_xiaomi_juice/a2934e1451bbca5f0c23431dd80faaac0058a84a/prebuilt/boot.img 
        zip -u Cherish-OS-v5.5-*.zip boot.img
        chmod +rwx pixeldrain_upload.sh
        bash pixeldrain_upload.sh >/dev/null 2>&1
        rm -rf *.txt *.zip *.img
        #cd citrus
        #rm -rf *.sh
        #wget https://raw.githubusercontent.com/newestzdn/anthrskrpt/main/pixeldrain_upload.sh
        #chmod +rwx pixeldrain_upload.sh
        bash pixeldrain_upload.sh >/dev/null 2>&1
        
      env:
        TOKEN_BOT_TELE: ${{  secrets.TOKEN_BOT_TELE  }}
        ID_CHAT: ${{  secrets.ID_CHAT  }}
        pixeltoken: ${{  secrets.pixeltoken  }}
        DEVICE_CODENAME: ${{ github.event.inputs.DEVICE_CODENAME }}
        
